#!/bin/sh

QMAKE_BIN=qmake
WHICH=which

if uname -a | grep -iq Darwin; then
    DEFAULT_LIBS="/Library/Frameworks"
    QMAKE_PARAMS="-spec macx-g++"
elif uname -a | grep -iq linux; then
    DEFAULT_LIBS="PREFIX/lib"
    QMAKE_PARAMS=" -makefile -unix "
else
    DEFAULT_LIBS="PREFIX/lib"
    QMAKE_PARAMS=""
fi

PROJECT_ROOT=`dirname $0`
PROJECT_ROOT=`(cd "$relpath"; /bin/pwd)`
TESTDIR=$PROJECT_ROOT/config.tests
CONFIG_LOG=$PROJECT_ROOT/config.log
NO_DBUS=0

C_RED='\e[1;31m'
C_BLUE='\e[1;34m'
C_GREEN='\e[1;32m'
C_CYAN='\e[1;36m'
C_NONE='\e[0m' # No Color

echo "CONFIG += silent" > config.in

print_defaults() {
  $QMAKE_BIN -query QT_INSTALL_$1
}

QT_INSTALL_BINS="`$QMAKE_BIN -query QT_INSTALL_BINS`"

while (( $# > 0 )); do
    if [ $1 == "-qmake-bin" ]; then
        QMAKE_BIN=$2; shift
    elif [ $1 == "-bootstrap" ]; then
        echo "CONFIG += bootstrap" >> config.in; shift
    elif [ $1 == "-prefix" ]; then
        echo "PREFIX = $2" >> config.in; shift
    elif [ $1 == "-libdir" ]; then
        echo "target.path = $2" >> config.in; shift
    elif [ $1 == "-docdir" ]; then
        echo "docs.path = $2" >> config.in; shift
    elif [ $1 == "-headerdir" ]; then
        echo "include.path = $2" >> config.in; shift
    elif [ $1 == "-bindir" ]; then
        echo "bin.path = $2" >> config.in; shift
    elif [ $1 == "-debug" ]; then
        echo "CONFIG += debug" >> config.in
    elif [ $1 == "-release" ]; then
        echo "CONFIG += release" >> config.in
    elif [ $1 == "-no-dbus" ]; then
        echo "CONFIG -= dbus" >> config.in
        NO_DBUS=1
    elif [ $1 == "-verbose" ]; then
        echo "CONFIG -= silent" >> config.in
    elif [ $1 == "-help" ] || [ $1 == "--help" ]; then
        echo "Usage: ./`basename $0` [-prefix <dir>] [-libdir <dir>] [-docdir <dir>]"
        echo "       [-bindir <dir>] [-headerdir <dir>] [-qmake-bin <path>]"
        echo "       [-static] [-debug] [-release] [-no-dbus]"
        echo
        echo "Installation options:"
        echo
        echo "-prefix <dir> ....... This will install everything relative to <dir>"
        echo "                      default: `print_defaults PREFIX`"
        echo "-libdir <dir> ....... Libraries will be installed to <dir>"
        echo "                      default: `print_defaults LIBS`"
        echo "-docdir <dir> ....... Documentation will be installed to <dir>"
        echo "                      default: `print_defaults DOCS`"
        echo "-bindir <dir> ....... Executables will be installed to <dir>"
        echo "                      default: `print_defaults BINS`"
        echo "-headerdir <dir> .... Include files will be installed to <dir>"
        echo "                      default: `print_defaults HEADERS`"
        echo "-qmake-bin <path> ... Specifies the path to the qmake executable"
        echo "                      default: search the system path"
        echo "-debug .............. Build qx11grab with debugging symbols"
        echo "-release ............ Build qx11grab without debugging support"
        echo "-no-dbus ............ Build qx11grab without D-Bus support"
        echo "-verbose ............ shows compiler output"

        rm config.in
        exit
    else
        echo "Unrecognized configure option: $1"
        rm config.in
        exit
    fi
    shift
done

> $CONFIG_LOG

if ! $WHICH $QMAKE_BIN >>$CONFIG_LOG 2>&1; then
	echo >&2 "You don't seem to have 'qmake' in your PATH."
        echo >&2 "Cannot proceed."
        exit 1
fi

if [ -z "$MAKE" ]; then
  MAKE=
  for mk in gmake make; do
    if "$WHICH" $mk 2>&1| grep -qv "no "; then
      MAKE=`$WHICH $mk`
      break
    fi
  done
  if [ -z "$MAKE" ]; then
    echo >&2 "You don't seem to have 'make' or 'gmake' in your PATH."
    echo >&2 "Cannot proceed."
    exit 1
  fi
fi

configtest()
{
  echo -en "checking for $1\t" 
  echo -e  " \n\n $1\n" >>$CONFIG_LOG
  cd $TESTDIR/$1
  $QMAKE_BIN $QMAKE_PARAMS  >>$CONFIG_LOG 
  echo -n "."
  $MAKE clean >>$CONFIG_LOG 
  [ -f ./$1 ] && rm ./$1
  echo -n "."
  $MAKE >>$CONFIG_LOG 
  echo -n "."
  if ./$1 >>$CONFIG_LOG ; then
    echo -e >&2 "  [${C_GREEN}success${C_NONE}] "
    echo "DEFINES+=HAVE_$2">>$PROJECT_ROOT/config.in
  else
    echo -e >&2 "  [${C_RED}failure${C_NONE}] "
  fi
}

echo >&2 "Testing for optional external librarys."
echo >&2 "If a test fails, some features will not be available."


configtest qt4     QT

if [[ "$NO_DBUS" == "0" ]]; then
  configtest dbus    DBUS
  if test -x $PROJECT_ROOT/config.tests/dbus/dbus ; then
    echo "QT += dbus" >> $PROJECT_ROOT/config.in
  fi
fi

echo "autodetection finished. running qmake."
cd  $PROJECT_ROOT

mv config.in config.pri

if test -x "$QT_INSTALL_BINS/lrelease" ; then
  echo -e "${C_CYAN}make translations${C_NONE}"
  $QT_INSTALL_BINS/lrelease -compress -nounfinished ./src/src.pro
fi

$QMAKE_BIN $QMAKE_PARAMS -recursive 2>> $CONFIG_LOG

echo -e >&2 "${C_CYAN}configure finished. run $MAKE now.${C_NONE}\n"
